{"version":3,"sources":["Components/Loader/Loader.jsx","api/film-list-api.ts","redux/film-list-reducer.ts","App.tsx","reportWebVitals.js","redux/store.ts","index.js"],"names":["Loader","React","memo","className","APIInstance","axios","create","baseURL","filmListAPI","pageNumber","get","then","r","data","GET_FILMS_SUCCESS","GET_GENRES_SUCCESS","START_FETCHING","STOP_FETCHING","initialState","total_results","total_pages","page","results","isFetching","genres","filmListReducer","state","action","type","payload","actions","getFilms","dispatch","a","response","getGenres","localStorage","getItem","setItem","JSON","stringify","parse","SuspendedFilmList","lazy","SuspendedFilmDetail","App","exact","path","fallback","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","filmList","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a36846d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Loader = React.memo(() => {\r\n    return(\r\n        <div className={\"loader\"}>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Loader","import axios from \"axios\";\r\nimport {GenreType} from \"../redux/film-list-reducer\";\r\n\r\nlet config = {\r\n    baseURL: 'https://api.themoviedb.org/3/',\r\n}\r\n\r\nexport const APIInstance = axios.create(config)\r\n\r\nexport const filmListAPI = {\r\n    getFilms: (pageNumber: number) => {\r\n        return APIInstance.get(\r\n            `discover/movie?api_key=e83980f968c65acc5fe3a21f25c2b408&language=en-US&sort_by=popularity.desc&page=${pageNumber}`).then(r => r.data)\r\n    },\r\n    getGenres: () => {\r\n        return APIInstance.get('/genre/movie/list?api_key=e83980f968c65acc5fe3a21f25c2b408').then(r => r.data)\r\n    }\r\n}","import {InferActionTypes} from \"./store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {filmListAPI} from \"../api/film-list-api\";\r\n\r\nconst GET_FILMS_SUCCESS = 'GET_FILMS_SUCCESS'\r\nconst GET_GENRES_SUCCESS = 'GET_GENRES_SUCCESS'\r\nconst START_FETCHING = 'START_FETCHING'\r\nconst STOP_FETCHING = 'STOP_FETCHING'\r\n\r\ntype MovieType = {\r\n    adult: boolean,\r\n    backdrop_path: string,\r\n    genre_ids: Array<number>,\r\n    id: number,\r\n    original_language: string,\r\n    original_title: string,\r\n    overview: string,\r\n    popularity: number,\r\n    poster_path: string,\r\n    release_date: string,\r\n    title: string,\r\n    video: boolean,\r\n    vote_average: number,\r\n    vote_count: number,\r\n}\r\n\r\nexport type GenreType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst initialState = {\r\n    total_results: 500 as null | number,\r\n    total_pages: 500 as null | number,\r\n    page: null as null | number,\r\n    results: [] as Array<MovieType>,\r\n    isFetching: 0,\r\n    genres: [] as Array<GenreType>\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const filmListReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    const {type, payload} = action\r\n    switch (type) {\r\n        case GET_FILMS_SUCCESS: {\r\n            return {...state, ...payload, genres: [...state.genres]}\r\n        }\r\n        case START_FETCHING: {\r\n            return {...state, isFetching: state.isFetching + 1}\r\n        }\r\n        case STOP_FETCHING: {\r\n            return {...state, isFetching: state.isFetching - 1}\r\n        }\r\n        case GET_GENRES_SUCCESS: {\r\n            if (payload !== null) {\r\n                return {...state, genres: [...(payload.genres as Array<GenreType>)]}\r\n            }\r\n            return state\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    getFilmsSuccess: (payload: InitialStateType) => {\r\n        return {\r\n            type: GET_FILMS_SUCCESS,\r\n            payload\r\n        }\r\n    },\r\n    startFetching: () => {\r\n        return {\r\n            type: START_FETCHING,\r\n            payload: null\r\n        }\r\n    },\r\n    stopFetching: () => {\r\n        return {\r\n            type: STOP_FETCHING,\r\n            payload: null\r\n        }\r\n    },\r\n    getGenresSuccess: (payload: Array<GenreType>) => {\r\n        return {\r\n            type: GET_GENRES_SUCCESS,\r\n            payload: {\r\n                ...initialState,\r\n                genres:  [...payload]\r\n            } as InitialStateType\r\n        }\r\n    }\r\n}\r\n\r\nexport const getFilms = (pageNumber: number) => async (dispatch: Dispatch) => {\r\n    dispatch(actions.startFetching())\r\n    const response = await filmListAPI.getFilms(pageNumber)\r\n    dispatch(actions.getFilmsSuccess(response))\r\n    dispatch(actions.stopFetching())\r\n}\r\n\r\nexport const getGenres = () => async (dispatch: Dispatch) => {\r\n    dispatch(actions.startFetching())\r\n    if (!localStorage.getItem('genres_list')) {\r\n        const response = await filmListAPI.getGenres()\r\n        localStorage.setItem('genres_list', JSON.stringify(response.genres))\r\n    }\r\n    let genres = JSON.parse(localStorage.getItem('genres_list') as string)\r\n    dispatch(actions.getGenresSuccess(genres))\r\n    dispatch(actions.stopFetching())\r\n}","import './App.css';\nimport {BrowserRouter, Switch, Route, Redirect, HashRouter} from \"react-router-dom\";\n\nimport {lazy, Suspense} from \"react\";\nimport Loader from \"./Components/Loader/Loader\";\n\nconst SuspendedFilmList = lazy(() => import(\"./Components/FilmList/FilmList\"))\nconst SuspendedFilmDetail = lazy(() => import(\"./Components/FilmDetail/FilmDetail\"))\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <HashRouter>\n            <Switch>\n                <Route exact path={'/films'}>\n                    <Suspense fallback={<Loader/>}>\n                        <SuspendedFilmList/>\n                    </Suspense>\n                </Route>\n                <Route exact path={'/films/:currentPage/:filmId'}>\n                    <Suspense fallback={<Loader/>}>\n                        <SuspendedFilmDetail/>\n                    </Suspense>\n                </Route>\n                <Route path={''}>\n                    <Redirect to={'/films'}/>\n                </Route>\n            </Switch>\n        </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {filmListReducer} from \"./film-list-reducer\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    filmList: filmListReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nlet store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store\r\n\r\ntype PropertiesTypes<T> = T extends {[key: string]: infer U} ? U : never\r\nexport type InferActionTypes<T extends {[key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}